name: Upload Files to KV Storage via API

on:
  workflow_dispatch:

jobs:
  upload-to-kv:
    runs-on: ubuntu-latest
    environment: cf

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install jq (for JSON checks)
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Read KV Namespace IDs from wrangler.toml
        run: |
          # Ganti binding di sini agar sesuai wrangler.toml-mu.
          # Kalau kamu belum punya binding2 ini, tambahkan ke wrangler.toml dulu.
          HTML_NAMESPACE_ID=$(awk '/\[\[kv_namespaces\]\]/ {inblk=1} inblk && /binding *= *"HTML_FILES"/ {getid=1} getid && /id *= *"/ {gsub(/.*id *= *"|"$/, "", $0); print $0; exit}' wrangler.toml)
          CSS_NAMESPACE_ID=$(awk  '/\[\[kv_namespaces\]\]/ {inblk=1} inblk && /binding *= *"CSS_FILES"/  {getid=1} getid && /id *= *"/ {gsub(/.*id *= *"|"$/, "", $0); print $0; exit}' wrangler.toml)
          JS_NAMESPACE_ID=$(awk   '/\[\[kv_namespaces\]\]/ {inblk=1} inblk && /binding *= *"JS_FILES"/   {getid=1} getid && /id *= *"/ {gsub(/.*id *= *"|"$/, "", $0); print $0; exit}' wrangler.toml)
          IMAGE_NAMESPACE_ID=$(awk '/\[\[kv_namespaces\]\]/ {inblk=1} inblk && /binding *= *"IMAGE_FILES"/{getid=1} getid && /id *= *"/ {gsub(/.*id *= *"|"$/, "", $0); print $0; exit}' wrangler.toml)

          echo "HTML_NAMESPACE_ID=$HTML_NAMESPACE_ID"   >> $GITHUB_ENV
          echo "CSS_NAMESPACE_ID=$CSS_NAMESPACE_ID"     >> $GITHUB_ENV
          echo "JS_NAMESPACE_ID=$JS_NAMESPACE_ID"       >> $GITHUB_ENV
          echo "IMAGE_NAMESPACE_ID=$IMAGE_NAMESPACE_ID" >> $GITHUB_ENV

          # Fail cepat jika ada yang kosong (supaya jelas penyebabnya)
          for v in HTML_NAMESPACE_ID CSS_NAMESPACE_ID JS_NAMESPACE_ID; do
            if [ -z "${!v}" ]; then
              echo "❌ $v kosong. Pastikan binding ada di wrangler.toml (atau ubah workflow agar pakai binding yang benar)."
              exit 1
            fi
          done

      - name: Upload HTML files (raw)
        env:
          CF_API_TOKEN:   ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CF_ACCOUNT_ID:  ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          NAMESPACE_ID:   ${{ env.HTML_NAMESPACE_ID }}
        run: |
          set -euo pipefail
          encode() { python3 - <<'PY' "$1"; import sys, urllib.parse as u; print(u.quote(sys.argv[1], safe='')); PY; }
          put() {
            local KEY="$1"; local FILE="$2"
            curl -fsS -X PUT \
              "https://api.cloudflare.com/client/v4/accounts/$CF_ACCOUNT_ID/storage/kv/namespaces/$NAMESPACE_ID/values/$(encode "$KEY")" \
              -H "Authorization: Bearer $CF_API_TOKEN" \
              --data-binary @"$FILE" \
              | tee /tmp/resp.json | jq -e '.success==true' >/dev/null
            echo "✅ $KEY"
          }
          put "index.html"     "index.html"
          put "sub.html"       "sub.html"
          put "converter.html" "converter.html"
          put "link.html"      "link.html"

      - name: Upload CSS files (raw)
        env:
          CF_API_TOKEN:   ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CF_ACCOUNT_ID:  ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          NAMESPACE_ID:   ${{ env.CSS_NAMESPACE_ID }}
        run: |
          set -euo pipefail
          encode() { python3 - <<'PY' "$1"; import sys, urllib.parse as u; print(u.quote(sys.argv[1], safe='')); PY; }
          for f in css/common.css css/index.css css/link.css css/sub.css css/converter.css; do
            key=$(basename "$f")
            curl -fsS -X PUT \
              "https://api.cloudflare.com/client/v4/accounts/$CF_ACCOUNT_ID/storage/kv/namespaces/$NAMESPACE_ID/values/$(encode "$key")" \
              -H "Authorization: Bearer $CF_API_TOKEN" \
              --data-binary @"$f" \
              | tee /tmp/resp.json | jq -e '.success==true' >/dev/null
            echo "✅ $key"
          done

      - name: Upload JS files (raw)
        env:
          CF_API_TOKEN:   ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CF_ACCOUNT_ID:  ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          NAMESPACE_ID:   ${{ env.JS_NAMESPACE_ID }}
        run: |
          set -euo pipefail
          encode() { python3 - <<'PY' "$1"; import sys, urllib.parse as u; print(u.quote(sys.argv[1], safe='')); PY; }
          for f in js/common.js js/index.js js/link.js js/sub.js js/converter.js; do
            key=$(basename "$f")
            curl -fsS -X PUT \
              "https://api.cloudflare.com/client/v4/accounts/$CF_ACCOUNT_ID/storage/kv/namespaces/$NAMESPACE_ID/values/$(encode "$key")" \
              -H "Authorization: Bearer $CF_API_TOKEN" \
              --data-binary @"$f" \
              | tee /tmp/resp.json | jq -e '.success==true' >/dev/null
            echo "✅ $key"
          done

      - name: Upload images (optional)
        if: env.IMAGE_NAMESPACE_ID != ''
        env:
          CF_API_TOKEN:   ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CF_ACCOUNT_ID:  ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          NAMESPACE_ID:   ${{ env.IMAGE_NAMESPACE_ID }}
        run: |
          set -euo pipefail
          shopt -s nullglob
          encode() { python3 - <<'PY' "$1"; import sys, urllib.parse as u; print(u.quote(sys.argv[1], safe='')); PY; }
          for f in images/*; do
            key=$(basename "$f")
            curl -fsS -X PUT \
              "https://api.cloudflare.com/client/v4/accounts/$CF_ACCOUNT_ID/storage/kv/namespaces/$NAMESPACE_ID/values/$(encode "$key")" \
              -H "Authorization: Bearer $CF_API_TOKEN" \
              --data-binary @"$f" \
              | tee /tmp/resp.json | jq -e '.success==true' >/dev/null
            echo "✅ $key"
          done
